[project]
name = "sttr"
version = "0.1.0"
description = "Hotkey-driven audio capture and transcription utility"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Lennart", email = ""},
]
keywords = [
    "voice",
    "speech-to-text",
    "clipboard",
    "hotkey",
    "transcription",
    "productivity",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]

dependencies = [
    "pynput>=1.7.6",
    "sounddevice>=0.4.6",
    "soundfile>=0.12.1",
    "numpy>=1.24.0",
    "faster-whisper>=1.0.0",
    "google-generativeai>=0.3.0",
    "google-genai>=0.1.0",
    "python-dotenv>=1.0.0",
    "pyperclip>=1.8.2",
    "ipykernel>=6.30.1",
    "litellm>=1.42.12",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "sounddevice.*",
    "soundfile.*",
    "pynput.*",
    "faster_whisper.*",
    "whisper.*",
    "httpx.*",
    "yaml.*",
    "pyperclip.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gui: marks tests that require GUI",
    "audio: marks tests that require audio hardware",
]

[tool.bandit]
exclude_dirs = ["tests", ".venv", "venv", "__pycache__"]
skips = ["B101"]  # Skip assert_used test

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.format]
# Ruff's formatter is Black-compatible by default
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort (import sorting)
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
    "ARG",   # flake8-unused-arguments
    "SIM",   # flake8-simplify
    "PTH",   # flake8-use-pathlib
    "PL",    # pylint
    "RUF",   # ruff-specific rules
]
ignore = [
    "E501",    # line too long (handled by formatter)
    "E402",    # module level import not at top of file
    "B008",    # do not perform function calls in argument defaults
    "C901",    # too complex
    "ARG001",  # unused function argument
    "ARG002",  # unused method argument
    "PLR0913", # too many arguments
    "PLR2004", # magic value used in comparison
]

[tool.ruff.lint.isort]
known-first-party = ["sttr"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports
"sandbox/*" = ["ALL"]  # ignore all rules in sandbox

[tool.pylint.messages_control]
max-line-length = 88
disable = [
    "C0111",  # missing-docstring
    "R0903",  # too-few-public-methods
    "C0103",  # invalid-name
    "R0913",  # too-many-arguments
]

[tool.pylint.format]
max-line-length = 88

[dependency-groups]
dev = [
    "pre-commit>=4.3.0",
]
